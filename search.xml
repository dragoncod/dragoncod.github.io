<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[闭包]]></title>
    <url>%2F2017%2F12%2F14%2F%E9%97%AD%E5%8C%85%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[Array数组类型]]></title>
    <url>%2F2017%2F12%2F11%2FArray%E6%95%B0%E7%BB%84%E7%B1%BB%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[数组类型检测数组 instanceof 12const arr = [1,2,3]arr instanceof Array // true instanceof 操作符具有一定的局限性，它假定的是只有一个全局执行环境。如果页面中包含多个框架，那么就存在多个全局环境，从而存在多个不同版本的Array的构造函数。 Array.isArray(value) 12const arr = [1,2,3]Array.isArray(arr) // true 数组的转换方法123const arr = ["dog", "cat", "monkey"]arr.toString() // "dog,cat,monkey"arr.valueOf() // ["dog", "cat", "monkey"]]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>array</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS中的基本类型和引用类型]]></title>
    <url>%2F2017%2F12%2F10%2FJS%E4%B8%AD%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[基本类型和引用类型基本概念在js中，变量可能包含两种不同数据类型的值：基本类型值和引用类型值。基本类型值指的是简单的数据段，而引用类型值指那些可能由多个值构成的对象。 两者区别1.只能给饮用类型值动态的添加属性。 1234567const person = new Object()person.name = 'James'alert(person.name) // Jamesconst name = 'Haden'name.age = 18alert(name.age) // undefined 2.d]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>数据类型</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS中的数据类型]]></title>
    <url>%2F2017%2F12%2F09%2FJS%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[数据的类型6种基本类型 undefined、null、boolean、number、string、symbol(es6新增) 1种复杂数据类型 object typeof操作符typeof操作符可以检测的数据类型包括 undefined、boolean、string、number、function、object 123typeof array // "object"typeof null // "object"typeof RegExp // "object" object 类型object每一个实例都具有下列属性和方法 constructor : 保存着用于创建当前对象的函数。例如 const o = new Object() ，构造函数就是Object() hasOwnProperty(propertyName) : 用于检查给定的属性在当前对象实例中（而不是在实例的原型中）是否存在。其中，作为参数的属性名（propertyName）必须是以字符串形式指定。例如：o.hasOwnProperty(&quot;name&quot;) isPrototypeOf(object) : 用于检查传入的对象是否是传入对象的原型。 propertyIsEnumerable(propertyName) : 用于检查给定的属性是否能有用for-in语句来枚举。 toLocaleString() : 返回对象的字符串表示，该字符串与执行环境的地区对应。 toString() : 返回对象的字符串表示。 valueOf() : 返回对象的字符串、数值或布尔值表示。通常与toString()方法的返回值相同 这里特意尝试了一下toLocaleString()和toString()的区别 当数字为四位以上的时候 123const a = 1234a.toString() // "1234"a.toLocaleString() // "1,234" 当获取的是标准时间格式时 123let dateTime = new Date()dateTime.toString() //"Sat Dec 09 2017 23:27:52 GMT+0800 (CST)"dateTime.toLocaleString() //"2017/12/9 下午11:27:52"]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>数据类型</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[算是新的开始吧]]></title>
    <url>%2F2017%2F12%2F08%2F%E7%AE%97%E6%98%AF%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B%E5%90%A7%2F</url>
    <content type="text"><![CDATA[前几天去了一家小有名气的公司面试，总体来说还算比较轻松，笔试题答的还算可以，面试的时候提出的问题也能答出来，但是还是没能得到面试官的认可，主要问题就在于基础不牢，有的问题需要面试官提示一下才能回想起来。 回来之后把自己的github清空了，想了一下，自己学了这么久，什么也会点，但是什么都不精通，还是不能太着急，还是要注重基础，从基础开始，从头再来一遍，加油吧～]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
</search>
